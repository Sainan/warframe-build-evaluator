local { evaluate_build, parse_build, build_getConditionals, build_applyConditionals, build_applyNoConditionals, build_applyAllConditionals } = require "evaluator"

local function about_equal(a, b)
	return math.abs(a - b) < 1
end

-- Test rank 30 stats
do
	-- Most warframes just gain 100 health, 100 shield, and 50 power.
	local excalibur = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Excalibur/Excalibur", rank = 30 } }.powersuit
	assert(excalibur.health == 370)
	assert(excalibur.shield == 370)
	assert(excalibur.power == 150)

	-- Then there's some who gain 200 health but no shields.
	local inaros = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30 } }.powersuit
	assert(inaros.health == 2310)
	assert(inaros.shield == 0)
	assert(inaros.power == 150)
	local grendel = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Devourer/Devourer", rank = 30 } }.powersuit
	assert(grendel.health == 1295)
	assert(grendel.shield == 95)
	assert(grendel.power == 225)

	-- Nidus has no shields, instead gains 100 armor, +15% ability strength and 15 health regeneration/s.
	local nidus = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Infestation/Infestation", rank = 30 } }.powersuit
	assert(nidus.health == 555)
	assert(nidus.shield == 0)
	assert(nidus.armor == 450)
	assert(about_equal(nidus.ability_strength * 100, 115))
	assert(nidus.power == 150)
	assert(nidus.heal_rate == 15)

	-- Kullervo also has no shield and instead gains 200 health and 100 armor.
	local kullervo = evaluate_build { powersuit = { name = "/Lotus/Powersuits/PaxDuviricus/PaxDuviricus", rank = 30 } }.powersuit
	assert(kullervo.health == 1205)
	assert(kullervo.shield == 0)
	assert(kullervo.armor == 650)
	assert(kullervo.power == 225)

	-- Hildryn gains 500 shields.
	local hildyrn = evaluate_build { powersuit = { name = "/Lotus/Powersuits/IronFrame/IronFrame", rank = 30 } }.powersuit
	assert(hildyrn.health == 280)
	assert(hildyrn.shield == 1780)
	assert(hildyrn.power == 0)

	-- Xaku gains 90 health, 90 shield, and 70 power.
	local xaku = evaluate_build { powersuit = { name = "/Lotus/Powersuits/BrokenFrame/BrokenFrame", rank = 30 } }.powersuit
	assert(xaku.health == 359)
	assert(xaku.shield == 329)
	assert(xaku.power == 230)

	-- Lavos gains 200 health, 100 shield, and 100 armor.
	local lavos = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Alchemist/Alchemist", rank = 30 } }.powersuit
	assert(lavos.health == 740)
	assert(lavos.shield == 370)
	assert(lavos.armor == 675)
	assert(lavos.power == 0)

	-- Valkyr only gains 50 shield.
	local valkyr = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Berserker/Berserker", rank = 30 } }.powersuit
	assert(valkyr.health == 370)
	assert(valkyr.shield == 185)
	assert(valkyr.power == 150)
end

-- Test intermediate rank stats
do
	local base = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Excalibur/Excalibur", rank = 0 } }.powersuit
	local r22 = evaluate_build { powersuit = { name = "/Lotus/Powersuits/Excalibur/Excalibur", rank = 22 } }.powersuit
	assert(r22.power == base.power + 35)
	assert(r22.health == base.health + 80)
	assert(r22.shield == base.shield + 70)
end

-- Test mods increasing stats
do
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 0 }}}}.powersuit.health, 2520))
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 1 }}}}.powersuit.health, 2730))
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 2 }}}}.powersuit.health, 2940))
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 3 }}}}.powersuit.health, 3150))
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 4 }}}}.powersuit.health, 3360))
end
do
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/DualStat/VigorMod", rank = 0 }}}}.powersuit.health, 2502))
	assert(about_equal(evaluate_build{ powersuit = { name = "/Lotus/Powersuits/Sandman/Sandman", rank = 30, mods = {{ name = "/Lotus/Upgrades/Mods/Warframe/DualStat/VigorMod", rank = 5 }}}}.powersuit.health, 3464))
end
do
	assert(about_equal(evaluate_build{
		powersuit = {
			name = "/Lotus/Powersuits/Sandman/Sandman",
			rank = 30,
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 10 },
				{ name = "/Lotus/Upgrades/Mods/Warframe/DualStat/VigorMod", rank = 5 },
			}
		}
	}.powersuit.health, 5774))
end

-- Conditionals
do
	local build = parse_build{
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Swords/PrimeKatana/PrimeNikana",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Melee/Event/ComboCritChanceMod", rank = 10 }, -- Blood Rush
			}
		}
	}
	assert(about_equal(build_applyNoConditionals(build).melee.crit_chance * 100, 28))
	assert(about_equal(build_applyAllConditionals(build).melee.crit_chance * 100, 151.3))
end
do
	local build = parse_build{
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Swords/PrimeKatana/PrimeNikana",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Melee/WeaponCritChanceMod", rank = 5 }, -- True Steel
				{ name = "/Lotus/Upgrades/Mods/Melee/Event/ComboCritChanceMod", rank = 10 }, -- Blood Rush
			}
		}
	}
	assert(about_equal(build_applyNoConditionals(build).melee.crit_chance * 100, 61.6))
	assert(about_equal(build_applyConditionals(build, {
		["PM_HEAVY_MELEE"] = 1
	}).melee.crit_chance * 100, 95.5))
	assert(about_equal(build_applyConditionals(build, {
		["/Lotus/Upgrades/CosmeticEnhancers/Offensive/OnComboTierCondition"] = 11
	}).melee.crit_chance * 100, 184.9))
	assert(about_equal(build_applyAllConditionals(build).melee.crit_chance * 100, 218.5))
end
do
	local build = parse_build{
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Swords/PrimeKatana/PrimeNikana",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Melee/Event/SlideAttackCritChanceMod", rank = 5 }, -- Maiming Strike
			}
		}
	}
	assert(about_equal(build_applyNoConditionals(build).melee.crit_chance * 100, 28))
	assert(about_equal(build_applyAllConditionals(build).melee.crit_chance * 100, 70))
end
do
	local build = parse_build{
		powersuit = {
			name = "/Lotus/Powersuits/Sandman/InarosPrime",
			mods = {
				{ name = "/Lotus/Upgrades/CosmeticEnhancers/Defensive/IncreaseMaxHealthOnHealthPickup" }
			}
		}
	}
	assert(about_equal(build_applyNoConditionals(build).powersuit.health, 2415))
	assert(about_equal(build_applyAllConditionals(build).powersuit.health, 2615))
end

-- Test set mods
do
	local inaros_with_umbral_vitality_and_fiber = evaluate_build{
		powersuit = {
			name = "/Lotus/Powersuits/Sandman/Sandman",
			rank = 30,
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Sets/Umbra/WarframeUmbraModA", rank = 10 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Umbra/WarframeUmbraModB", rank = 10 },
			}
		}
	}.powersuit
	assert(about_equal(inaros_with_umbral_vitality_and_fiber.health, 5313))
	assert(about_equal(inaros_with_umbral_vitality_and_fiber.armor, 552))
end
do
	local build = evaluate_build{
		melee = {
			name = "/Lotus/Powersuits/Pacifist/PacifistFistPrime",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Sets/Sacrifice/MeleeSacrificeModA", rank = 10 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Sacrifice/MeleeSacrificeModB", rank = 10 },
			}
		}
	}
	assert(about_equal(build.melee.crit_chance * 100, 187.5))
end
do
	local build = parse_build{
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Dagger/CeramicDagger",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Melee/Event/ComboCritChanceMod", rank = 10 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/MeleeGladiatorViceMod", rank = 5 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/MeleeGladiatorRushMod", rank = 5 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/MeleeGladiatorMightMod", rank = 5 },
			}
		}
	}
	assert(about_equal(build_applyAllConditionals(build).melee.crit_chance * 100, 87))
end
do
	local build = parse_build{
		powersuit = {
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/WarframeGladiatorResolveMod", rank = 5 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/WarframeGladiatorFinesseMod", rank = 5 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/WarframeGladiatorAegisMod", rank = 5 },
			}
		},
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Dagger/CeramicDagger",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Melee/Event/ComboCritChanceMod", rank = 10 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/MeleeGladiatorViceMod", rank = 5 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/MeleeGladiatorRushMod", rank = 5 },
				{ name = "/Lotus/Upgrades/Mods/Sets/Gladiator/MeleeGladiatorMightMod", rank = 5 },
			}
		}
	}
	assert(about_equal(build_applyAllConditionals(build).melee.crit_chance * 100, 120))
end

-- Aura + Coaction Drift
do
	assert(about_equal(evaluate_build{
		powersuit = {
			name = "/Lotus/Powersuits/Sandman/InarosPrime",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Aura/PlayerHealthAuraMod", rank = 5 }, -- Physique
			}
		}
	}.powersuit.health, 2898))
end
do
	assert(about_equal(evaluate_build{
		powersuit = {
			name = "/Lotus/Powersuits/Sandman/InarosPrime",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Aura/PlayerHealthAuraMod", rank = 5 }, -- Physique
				{ name = "/Lotus/Upgrades/Mods/OrokinChallenge/OrokinChallengeModCollaboration", rank = 5 }, -- Coaction Drift
			}
		}
	}.powersuit.health, 3053))
end

-- Basic Damage Increase
do
	local build = evaluate_build{
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Dagger/CeramicDagger",
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Melee/Expert/WeaponMeleeDamageModExpert", rank = 10 },
			}
		}
	}
	assert(about_equal(build.melee.dmg_impact, 37.1))
	assert(about_equal(build.melee.dmg_puncture, 333.9))
end

-- Gear may have mods that affect other gear
do
	local build = {
		primary = {
			mods = {
				{ name = "/Lotus/Upgrades/CosmeticEnhancers/Offensive/PrimaryDamageOnMeleeKill", rank = 5 }, -- Primary Dexterity
			}
		},
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Swords/PrimeKatana/PrimeNikana"
		}
	}
	assert(evaluate_build(build).melee.combo_duration == 12.5)
end
do
	local build = parse_build{
		powersuit = {
			mods = {
				{ name = "/Lotus/Upgrades/CosmeticEnhancers/Offensive/GolemArcaneMeleeDamageOnCrit", rank = 5 }, -- Arcane Fury
			}
		},
		melee = {
			name = "/Lotus/Weapons/Tenno/Melee/Dagger/CeramicDagger",
		}
	}
	assert(about_equal(build_applyAllConditionals(build).melee.dmg_impact, 39.2))
	assert(about_equal(build_applyAllConditionals(build).melee.dmg_puncture, 352.8))
end

-- Archon Shards
do
	assert(about_equal(evaluate_build{
		powersuit = {
			name = "/Lotus/Powersuits/Sandman/InarosPrime",
			rank = 0,
			mods = {
				{ name = "/Lotus/Upgrades/Mods/Warframe/AvatarHealthMaxMod", rank = 10 },
				{ name = "/Lotus/Upgrades/Invigorations/ArchonCrystalUpgrades/ArchonCrystalUpgradeWarframeHealthMaxMythic" },
				{ name = "/Lotus/Upgrades/Invigorations/ArchonCrystalUpgrades/ArchonCrystalUpgradeWarframeHealthMax" },
				{ name = "/Lotus/Upgrades/Invigorations/ArchonCrystalUpgrades/ArchonCrystalUpgradeWarframeHealthMaxMythic" },
				{ name = "/Lotus/Upgrades/Invigorations/ArchonCrystalUpgrades/ArchonCrystalUpgradeWarframeHealthMax" },
				{ name = "/Lotus/Upgrades/Invigorations/ArchonCrystalUpgrades/ArchonCrystalUpgradeWarframeHealthMaxMythic" },
			}
		}
	}.powersuit.health, 5405))
end

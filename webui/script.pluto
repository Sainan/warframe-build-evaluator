local evaluator = dofile("/evaluator.pluto")

evaluator.init(js_invoke("get_data"))

get_max_rank = |mod| -> evaluator.data.mods[mod].fusion_limit

function evaluate_build(inbuild, conditionals, simulator_enemy, simulator_level)
	js_invoke("update_export", exportvar(inbuild))

	local build = evaluator.parse_build(inbuild)
	js_invoke("update_conditionals", evaluator.build_getConditionals(build))
	local outbuild = evaluator.build_applyConditionals(build, conditionals)
	js_invoke("update_evaluation", outbuild)

	if simulator_enemy then
		document.querySelector("#simulator-body").textContent = ""
		if outbuild.primary then
			js_invoke("add_to_simulator", "Primary", evaluator.calculate_damage(simulator_enemy, simulator_level, outbuild.primary))
		end
		if outbuild.secondary then
			js_invoke("add_to_simulator", "Secondary", evaluator.calculate_damage(simulator_enemy, simulator_level, outbuild.secondary))
		end
		if outbuild.melee then
			js_invoke("add_to_simulator", "Melee", evaluator.calculate_damage(simulator_enemy, simulator_level, outbuild.melee))
		end
	end

	js_invoke("update_share", evaluator.export_build(inbuild):split(""):map(|x| -> x:byte()))
end

unpack_share = evaluator.import_build

js_invoke("ready_to_evaluate")

-- @pluto_warnings enable-non-portable-bytecode

local function readfile(path)
	local f <close> = io.open(path, "rb")
	return f:read("*a")
end

local json = require "pluto:json"

local ExportWarframes = json.decode(readfile("data/ExportWarframes_en.json")).ExportWarframes
local overframe_mods = json.decode(readfile("data/overframe_mods.json"))

local function get_powersuit_data_from_public_export(uniqueName: string): ?table
	for ExportWarframes as item do
		if item.uniqueName == uniqueName then
			return item
		end
	end
	return nil
end

local function get_num_mods_from_set(mods, set)
	local n = 0
	for mods as mod do
		if overframe_mods[mod.name].data.ModSet == set then
			++n
		end
	end
	return n
end

export function evaluate_build(build)
	local eval = {}
	if build.powersuit then
		local pe_data = get_powersuit_data_from_public_export(build.powersuit.name)
		eval.powersuit = {
			health = pe_data.health,
			shield = pe_data.shield,
			armor = pe_data.armor,
			power = pe_data.power,
		}

		local rank = build.powersuit.rank or 30
		switch pe_data.parentName do
			case "/Lotus/Powersuits/Sandman/SandmanBaseSuit": -- Inaros
			case "/Lotus/Powersuits/Devourer/DevourerBaseSuit": -- Grendel
				eval.powersuit.health += (rank + 2) // 3 * 10
				eval.powersuit.health += (rank + 1) // 3 * 10
				eval.powersuit.power += rank // 3 * 5
				break

			case "/Lotus/Powersuits/Infestation/InfestationBaseSuit": -- Nidus
				eval.powersuit.health += (rank + 2) // 3 * 10
				eval.powersuit.armor += (rank + 1) // 3 * 10
				eval.powersuit.power += rank // 3 * 5
				break

			case "/Lotus/Powersuits/PaxDuviricus/PaxDuviricusBaseSuit": -- Kullervo
				eval.powersuit.health += (rank + 2) // 3 * 20
				eval.powersuit.armor += (rank + 1) // 3 * 10
				eval.powersuit.power += rank // 3 * 5
				break

			case "/Lotus/Powersuits/IronFrame/IronFrameBaseSuit": -- Hildryn
				eval.powersuit.health += (rank + 2) // 3 * 10
				eval.powersuit.shield += (rank + 1) // 3 * 25
				eval.powersuit.shield += rank // 3 * 25
				break

			case "/Lotus/Powersuits/BrokenFrame/BrokenFrameBaseSuit": -- Xaku
				eval.powersuit.health += (rank + 2) // 3 * 9
				eval.powersuit.shield += (rank + 1) // 3 * 9
				eval.powersuit.power += rank // 3 * 7
				break

			case "/Lotus/Powersuits/Alchemist/AlchemistBaseSuit": -- Lavos
				eval.powersuit.health += (rank + 2) // 3 * 20
				eval.powersuit.shield += (rank + 1) // 3 * 10
				eval.powersuit.armor += rank // 3 * 10
				break

			case "/Lotus/Powersuits/Berserker/BerserkerBaseSuit": -- Valkyr
				eval.powersuit.health += (rank + 2) // 3 * 10
				eval.powersuit.shield += (rank + 1) // 3 * 5
				eval.powersuit.power += rank // 3 * 5
				break

			case "/Lotus/Powersuits/Pacifist/PacifistBaseSuit": -- Baruuk
			case "/Lotus/Powersuits/Garuda/GarudaBaseSuit": -- Garuda
			case "/Lotus/Powersuits/Wisp/WispBaseSuit": -- Wisp
			case "/Lotus/Powersuits/Yareli/YareliBaseSuit": -- Yareli
				eval.powersuit.health += (rank + 2) // 3 * 10
				eval.powersuit.shield += (rank + 1) // 3 * 10
				eval.powersuit.power += rank // 3 * 10
				break

			default:
				eval.powersuit.health += (rank + 2) // 3 * 10
				eval.powersuit.shield += (rank + 1) // 3 * 10
				eval.powersuit.power += rank // 3 * 5
		end

		if build.powersuit.mods then
			local upgrades = {}
			for build.powersuit.mods as mod do
				local mod_data = overframe_mods[mod.name].data
				local set_bonus = 1
				if mod_data.ModSetValues then
					local n = get_num_mods_from_set(build.powersuit.mods, mod_data.ModSet)
					set_bonus += mod_data.ModSetValues[n - 1]
				end
				for mod_data.Upgrades as upgrade do
					upgrades[upgrade.UpgradeType] = (upgrades[upgrade.UpgradeType] or 0) + upgrade.Value * (mod.rank ? mod.rank + 1 : 1) * set_bonus
				end
			end
			if upgrades.AVATAR_HEALTH_MAX then
				eval.powersuit.health *= 1 + upgrades.AVATAR_HEALTH_MAX
			end
			if upgrades.AVATAR_ARMOUR then
				eval.powersuit.armor *= 1 + upgrades.AVATAR_ARMOUR
			end
		end
	end
	return eval
end

export function armor_to_damage_reduction(armor)
	return armor / (armor + 300)
end

export function calculate_effective_health(health, damage_reduction)
	return health / (1 - damage_reduction)
end
